import gspread
from oauth2client.service_account import ServiceAccountCredentials
import dotenv
import os
import re
from collections import defaultdict

dotenv.load_dotenv()

credentials_file = os.getenv('CREDENTIALS_FILE')
spreadsheet_id = os.getenv('SPREADSHEET_ID')

sheet_name = os.getenv('SHEET_NAMES').strip().split(',')
data_range = os.getenv('DATA_RANGES').strip().split(',')

def group_brands_and_lines(items: list[str]) -> dict[str, list[str]]:
    items = list(set(i.strip() for i in items if i.strip()))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏ –∏ –ø—Ä–æ–±–µ–ª—ã
    items_sorted = sorted(items, key=lambda x: -len(x))  # –î–ª–∏–Ω–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞
    result = defaultdict(list)

    for item in items_sorted:
        matched = False
        for potential_brand in items_sorted:
            if item == potential_brand:
                continue
            if item.upper().startswith(potential_brand.upper() + " "):
                line = item[len(potential_brand):].strip()
                result[potential_brand].append(line)
                matched = True
                break
        if not matched:
            result[item]  # –ü—Ä–æ—Å—Ç–æ –±—Ä–µ–Ω–¥ –±–µ–∑ –ª–∏–Ω–µ–µ–∫

    return dict(result)

def split_brand_line(full_name: str, categories_brand: list[str]) -> tuple[str, str]:
    for brand in sorted(categories_brand, key=lambda x: -len(x)):  # –î–ª–∏–Ω–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞
        if full_name.upper().startswith(brand.upper()):
            line = full_name[len(brand):].strip()
            return brand, line
    return full_name, ''  # –ï—Å–ª–∏ –±—Ä–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
credentials = ServiceAccountCredentials.from_json_keyfile_name(credentials_file, scope)
client = gspread.authorize(credentials)
spreadsheet = client.open_by_key(spreadsheet_id)

brands_db = {}
tags_db = {}
vapes_tags_db = []
vapes_db = []

vape_list = []
prefixs = []

place = ['–ù–ê –†–ê–ë–û–¢–ï - –ü–õ–û–©–ê–î–¨ –õ–ï–ù–ò–ù–ê', '–î–û–ú–ê - –ö–û–õ–û–î–ò–©–ò']
stop_worlds = ['–ò—Å–ø–∞—Ä–∏—Ç–µ–ª–∏']
replace_text = [' NEW!', ' (–ó–∞–≤–æ–¥—Å–∫–æ–π –Ω–∏–∫–æ—Ç–∏–Ω, –ë–ï–ó –±—É—Å—Ç–µ—Ä–∞)', ]

for sh_name, dt_range in zip(sheet_name, data_range):
    sheet = spreadsheet.worksheet(sh_name)
    data = sheet.get(dt_range)
    type = 'preorder' if sh_name == '–ó–∞–∫–∞–∑—ã - –ñ–∏–¥–∫–æ—Å—Ç–∏' else 'resale'

    prefix = ''
    categories_brand = list(group_brands_and_lines(prefixs))
    for row in data:
        if not row or row[0] in place:
            prefix = ''
            continue

        if len(row) < 4:
            prefix = re.sub(r'\d{2,}ML\b', '',
                row[0]
                .replace(replace_text[0], '')
                .replace(replace_text[1], '')
                .replace('Rick And Morty', '–†–ò–ö –ò –ú–û–†–¢–ò')
            ).strip()
            prefixs.append(prefix)

            if prefix in stop_worlds:
                continue

            brand, line = split_brand_line(prefix, categories_brand)

            if brand.upper() not in (v.upper() for v in brands_db.values()):
                brands_db[len(brands_db) + 1] = brand

        elif prefix != '':
            brand, line = split_brand_line(prefix, categories_brand)
            brand_id = next((k for k, v in brands_db.items() if v.upper() == brand.upper()), None)

            vape_list.append([
                row[0].split('‚Äî')[-1].strip(),  # –≤–∫—É—Å
                brand_id,
                brand,
                line,
                *(i.strip() if i == '–ï—Å—Ç—å' else '' for i in row[1:3]),  # –Ω–∞–ª–∏—á–∏–µ
                type,
                float(row[3].replace(',', '.'))  # —Ü–µ–Ω–∞
            ])
# –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –±—Ä–µ–Ω–¥–∞–º –∏ –ª–∏–Ω–µ–π–∫–∞–º
vapes_db = []
  
unique_rows = set()
result = []

for item in vape_list:
    if len(item) > 0:
        key = tuple(item) 
        if key not in unique_rows:
            unique_rows.add(key)
            result.append(item)
                        
vape_list = result.copy()
name_brand_id_list = [[row[0], row[1]] for row in vape_list]
vape_list_resale = [row for row in vape_list if row[5] == 'resale']
indexes = []
for index, row in enumerate(vape_list_resale):
    if name_brand_id_list.count([row[0], row[1]]) > 1:
        indexes += [[index for index, value in enumerate(name_brand_id_list) if value == [row[0], row[1]]]][:2]
    
result = []
for idx1, idx2, *rest in indexes:
    row1 = vape_list[idx1]
    row2 = vape_list[idx2]

    if row1[5] == 'preorder' and row2[5] == 'resale':
        row_preorder, row_resale = row1, row2
    elif row1[5] == 'resale' and row2[5] == 'preorder':
        row_preorder, row_resale = row2, row1
    else:
        print('–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ')
        continue
        
    availability_45_50_60 = (
        1 if row_resale[3] == '–ï—Å—Ç—å' and row_preorder[3] == '–ï—Å—Ç—å' else
        -1 if row_resale[3] == '–ï—Å—Ç—å' and row_preorder[3] == '' else
        0 if row_resale[3] == '' and row_preorder[3] == '–ï—Å—Ç—å' else
        None
    )

    availability_20 = (
        1 if row_resale[4] == '–ï—Å—Ç—å' and row_preorder[4] == '–ï—Å—Ç—å' else
        -1 if row_resale[4] == '–ï—Å—Ç—å' and row_preorder[4] == '' else
        0 if row_resale[5] == '' and row_preorder[4] == '–ï—Å—Ç—å' else
        None
    )

    merged_row = [
        row_preorder[0],  
        row_preorder[1],  
        row_preorder[2],  
        availability_45_50_60,
        availability_20,
        row_preorder[7] 
    ]

    result.append(merged_row)

indexes = [item for sublist in indexes for item in sublist]
vape_list = [row for index, row in enumerate(vape_list) if index not in indexes]

vapes_db += result

for index, row in enumerate(vape_list):
    if row[-2] == 'preorder':
        vape_list[index] = vape_list[index][0:3] + [0 if vape_list[index][3] == '–ï—Å—Ç—å' else None] + [0 if vape_list[index][4] == '–ï—Å—Ç—å' else None] + [vape_list[index][7]]
    elif row[-2] == 'resale':
        vape_list[index] = vape_list[index][0:3] + [-1 if vape_list[index][3] == '–ï—Å—Ç—å' else None] + [-1 if vape_list[index][4] == '–ï—Å—Ç—å' else None] + [vape_list[index][7]]
    else:
        print('–ù–µ —Å–æ–æ—Ç–≤')
        
vapes_db += vape_list

vapes_db = [[index + 1] + row for index, row in enumerate(vapes_db)]
tags = {
    '‚ùÑÔ∏è –õ—ë–¥': ['–õ–ï–î', '–õ–Å–î', '–ê–ô–°', 'ICE', '–•–û–õ–û–î', '–ú–û–†–û–ñ', 'ICED', '–•–û–õ–û–î–ù–ê–Ø', '–°–í–ï–ñ–ê–Ø'],
    'üç≠ –°–ª–∞–¥–∫–∏–π': ['–°–õ–ê–î–ö', '–°–ì–£–©', '–ì–ï–ú–ê–¢–û–ì–ï–ù', '–°–∫–∏—Ç–ª—Å', '–ê–Ω–∞–Ω–∞—Å', '–ú–∞–Ω–≥–æ', '–ó–µ–º–ª—è–Ω–∏–∫–∞', 
                '–ê—Ä–±—É–∑', '–î—ã–Ω—è', '–ú–∞–ª–∏–Ω', '–í–∏–Ω–æ–≥—Ä', '–ö–ª—É–±–Ω–∏–∫–∞', '–î—Ä–∞–≥–æ–Ω—Ñ—Ä—É—Ç', '–ì—É–∞–≤–∞', 
                '–ú–∞–Ω–¥–∞—Ä–∏–Ω', '–°–∞–∫—É—Ä', '–ë–∞–±–ª–≥–∞–º', '–ó–µ—Ñ–∏—Ä', '–õ–∏—á–∏', '–ù–µ–∫—Ç–∞—Ä–∏–Ω', '–ú–∞–Ω–≥–æ—Å—Ç–∏–Ω',
                '–ì—Ä—É—à–∞', '–ú—É–ª—å—Ç–∏—Ñ—Ä—É–∫—Ç', '–ß—É–ø–∞ —á—É–ø—Å', '–°–ª–∞–¥–∫–∞—è –ú—è—Ç–∞', '–°–ª–∞–¥–∫–∏–π –î—Ä–∞–≥–æ–Ω—Ñ—Ä—É—Ç',
                '–°–ª–∞–¥–∫–∏–π –í–∏–Ω–æ–≥—Ä–∞–¥', '–°–ª–∞–¥–∫–∏–π –ú–æ–ª–æ—á–Ω–æ-–ö–∞—Ä–∞–º–µ–ª—å–Ω—ã–π –ü–æ–ø–∫–æ—Ä–Ω'],
    'üçã –ö–∏—Å–ª—ã–π': ['–ö–ò–°–õ', '–ö–∏–≤–∏', '–õ–∏–º–æ–Ω', '–õ–∞–π–º', '–ö–ª—é–∫–≤–∞', '–ë–µ—Ä–≥–∞–º–æ—Ç', '–±—Ä—É—Å–Ω–∏–∫–∞', '–ö–∏—Å–ª–∞—è –ú–∞–ª–∏–Ω–∞'],
    'üçäüçã –ö–∏—Å–ª–æ-—Å–ª–∞–¥–∫–∏–π': ['–ú–∞—Ä–∞–∫—É–π—è', '–ì—Ä–∞–Ω–∞—Ç', '–ß–µ—Ä–Ω–∏–∫–∞', '–ï–∂–µ–≤–∏–∫–∞', '–ú–æ—Ä–æ—à–∫–∞', '–ü–æ–º–µ–ª–æ',
                    '–ö—Ä—ã–∂–æ–≤–Ω', '–ë–∞—Ä–±–∞—Ä–∏—Å', '–°–º–æ—Ä–æ–¥–∏–Ω–∞ –∫–∏—Å–ª–∏–Ω–∫–∞', '–ü–µ—Ä—Å–∏–∫–æ–≤–æ–µ –∂–µ–ª–µ —Å –ª–∏–º–æ–Ω–æ–º'],
    'üîÑ –î–≤–æ–π–Ω–æ–π': ['–î–≤–æ–π–Ω'],
    'üçØ –ú–µ–¥–æ–≤—ã–π': ['–º–µ–¥', '–º—ë–¥'], 
    'üç¶ –ú–æ—Ä–æ–∂–µ–Ω–æ–µ': ['–ú–æ—Ä–æ–∂–µ–Ω–æ–µ', '–ë–∞–Ω–∞–Ω–æ–≤–æ–µ –ú–æ—Ä–æ–∂–µ–Ω–æ–µ'],
    'üçµ –ß–∞–π': ['–ß–ê–ô', '–ó–µ–ª–µ–Ω—ã–π –ß–∞–π –õ–µ–º–æ–Ω–≥—Ä–∞—Å—Å', '–ú–æ–ª–æ—á–Ω—ã–π –ß–∞–π'],
    'ü•õ –ô–æ–≥—É—Ä—Ç': ['–ô–û–ì–£–†–¢', '–ô–æ–≥—É—Ä—Ç–æ–≤—ã–π –¥–µ—Å–µ—Ä—Ç –∏–∑ –º–∞–Ω–≥–æ', '–í–∏—à–Ω–µ–≤—ã–π –π–æ–≥—É—Ä—Ç', '–°–ª–∞–¥–∫–∏–π –º–∞–ª–∏–Ω–æ–≤—ã–π –π–æ–≥—É—Ä—Ç',
                 '–ô–æ–≥—É—Ä—Ç —Å –Ø–≥–æ–¥–∞–º–∏', '–ô–æ–≥—É—Ä—Ç –∏–∑ –ö—É–º–∫–≤–∞—Ç–∞ –∏ –ú–∞—Ä–∞–∫—É–π–∏'],
    'üçπ –ú–∏–∫—Å': ['–ú–ò–ö–°', 'ISTERIKA MIX', '–°–º–µ—Å—å –∞—Ñ—Ä–∏–∫–∞–Ω—Å–∫–∏—Ö —Ñ—Ä—É–∫—Ç–æ–≤ –∏–∑ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞',
               'Blackcurrant Raspberry Grape Candy\'s', 'Cherry Peach Lemonade'],
    'üß∏ –ú–∏—à–∫–∏': ['–ú–∏—à–∫–∏', 'Gummy Bears Strawberry Kiwi'],
    'ü•§ –ì–∞–∑–∏—Ä–æ–≤–∫–∞': ['–ì–ê–ó–ò–†', '–ê–ô–†–ï–ù', '–ü–£–ù–®', '–∫–æ–ª–∞', '–õ–∏–º–æ–Ω–∞–¥', '–ú–æ—Ö–∏—Ç–æ', '–¢–∞—Ä—Ö—É–Ω',
                '–°–æ–¥–∞', '–®–≤–µ–ø—Å', '–§–∞–Ω—Ç–∞', '–õ–∞–π–º–æ–≤–∞—è –≥–∞–∑–∏—Ä–æ–≤–∫–∞', '–í–∏—à–Ω–µ–≤–∞—è –≥–∞–∑–∏—Ä–æ–≤–∫–∞'],
    'üç¨ –ú–∞—Ä–º–µ–ª–∞–¥': ['–ú–ê–†–ú–ï–õ', 'Green Gummy'],
    'üç¨ –ñ–≤–∞—á–∫–∞': ['–ñ–í–ê–ß–ö–ê', 'Crazy 8'],
    'üç¨ –°–∫–∏—Ç–ª—Å': ['–°–∫–∏—Ç–ª—Å', '–§—Ä—É–∫—Ç–æ–≤—ã–π –°–∫–∏—Ç–ª—Å'],
    'üçπ –ù–∞–ø–∏—Ç–∫–∏': ['–ö–æ–º–ø–æ—Ç', '–ö–æ–∫—Ç–µ–π–ª—å', '–ü–∏–Ω–∞ –ö–æ–ª–∞–¥–∞', '–õ–∏–º–æ–Ω–∞–¥', '–†–µ–¥ –ë—É–ª–ª', '–§—Ä—ç—à',
                  '–°–º–æ—Ä–æ–¥–∏–Ω–æ–≤—ã–π –∫–æ–∫—Ç–µ–π–ª—å —Å –∫–ª—É–±–Ω–∏–∫–æ–π'],
    'ü•ê –í—ã–ø–µ—á–∫–∞': ['–ß–∏–∑–∫–µ–π–∫', '–ü–∏—Ä–æ', '–ó–∞–≤–∞—Ä–Ω–æ–π –∫—Ä–µ–º'],
    '‚ö° –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫': ['–†–µ–¥ –ë—É–ª–ª', '–≠–Ω–µ—Ä–≥–µ—Ç', '–∞–¥—Ä–µ–Ω–∞–ª–∏–Ω —Ä–∞—à', '–õ–∞–π–º —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫ –∫–æ–ª–∞', 'Cranberry energy',
                    'Energy Berry', '–í–∏–Ω–æ–≥—Ä–∞–¥–Ω—ã–π –∞–¥—Ä–µ–Ω–∞–ª–∏–Ω —Ä–∞—à'],
    'üçì –§—Ä—É–∫—Ç–æ–≤—ã–π': ['–ë–∞–Ω–∞–Ω', '–ü–µ—Ä—Å–∏–∫', '–ö–æ–∫–æ—Å', '–Ø–±–ª–æ–∫–æ', '–ö–∏–≤–∏', '–ú–∞–Ω–≥–æ', '–ê–ø–µ–ª—å—Å–∏–Ω', '–ì—Ä–µ–π–ø—Ñ—Ä—É—Ç',
                '–î—ã–Ω—è', '–õ–∞–π–º', '–î—Ä–∞–≥–æ–Ω—Ñ—Ä—É—Ç', '–ì—É–∞–≤–∞', '–ú–∞–Ω–¥–∞—Ä–∏–Ω', '–ö–∞–∫—Ç—É—Å', '–õ–∏—á–∏',
                '–ù–µ–∫—Ç–∞—Ä–∏–Ω', '–ú–∞–Ω–≥–æ—Å—Ç–∏–Ω', '–ì—Ä—É—à–∞', '–ú—É–ª—å—Ç–∏—Ñ—Ä—É–∫—Ç', '—Ñ—Ä—É–∫—Ç', '–°–ø–µ–ª—ã–π –ú–∞–Ω–≥–æ',
                '–°–ø–µ–ª–∞—è —á–µ—Ä–Ω–∏–∫–∞', '–°–≤–µ–∂–µ—Å–ø–µ–ª—ã–π –ë–∞–Ω–∞–Ω', '–ü–µ—Ä—Å–∏–∫–æ–≤—ã–π –°–æ–∫', '–®–µ–ª–∫–æ–≤–∏—Ü–∞'],
    'üçì –Ø–≥–æ–¥–∞': ['–°–º–æ—Ä–æ–¥–∏–Ω', '–í–∏—à–Ω', '–ó–µ–º–ª—è–Ω–∏', '–ß–µ—Ä–Ω–∏', '–ê—Ä–±—É–∑', '–ú–∞–ª–∏–Ω', '–í–∏–Ω–æ–≥—Ä', 
            '–ö–ª—É–±–Ω–∏', '–Ø–≥–æ–¥', '–ì—Ä–∞–Ω–∞—Ç', '–ï–∂–µ–≤–∏', '–ö–ª—é–∫–≤', '–ú–æ—Ä–æ—à–∫–∞', '–ö—Ä—ã–∂–æ–≤–Ω',
            '–ë–∞—Ä–±–∞—Ä–∏—Å', '–±—Ä—É—Å–Ω–∏', '–ö—Ä–∞—Å–Ω–∞—è –≤–∏—à–Ω—è', '–î–∏–∫–∞—è –≤–∏—à–Ω—è', '–°–∞–¥–æ–≤–∞—è –º–∞–ª–∏–Ω–∞'],
    'üçä –¶–∏—Ç—Ä—É—Å': ['–ê–ø–µ–ª—å—Å–∏–Ω', '–ì—Ä–µ–π–ø—Ñ—Ä—É—Ç', '–õ–∏–º–æ–Ω', '–õ–∞–π–º', '–ú–∞–Ω–¥–∞—Ä–∏–Ω', '–õ–µ–º–æ–Ω–≥—Ä–∞—Å—Å',
            '–ü–æ–º–µ–ª–æ', '–ú—É–ª—å—Ç–∏—Ñ—Ä—É–∫—Ç'],
    'üèùÔ∏è –¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π': ['–ö–æ–∫–æ—Å', '–ê–Ω–∞–Ω–∞—Å', '–ö–∏–≤–∏', '–ú–∞–Ω–≥–æ', '–ú–∞—Ä–∞–∫—É–π—è', '–î—Ä–∞–≥–æ–Ω—Ñ—Ä—É—Ç', '–ì—É–∞–≤–∞',
                    '–ú–∞–Ω–≥–æ—Å—Ç–∏–Ω', '–ú—É–ª—å—Ç–∏—Ñ—Ä—É–∫—Ç', '–¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π –ú–∞–Ω–≥–æ'],
    'üåø –¢—Ä–∞–≤—è–Ω–∏—Å—Ç—ã–π': ['–ê–ª–æ—ç', '–ú—è—Ç', '–õ–µ–º–æ–Ω–≥—Ä–∞—Å—Å', '–ë–∞–∑–∏–ª–∏–∫', '—Ö–≤–æ'],
    'üå± –û—Å–≤–µ–∂–∞—é—â–∏–π': ['–ê–ª–æ—ç', '–ú—è—Ç–∞', '–ú–µ–Ω—Ç–æ–ª', '–ö–∞–∫—Ç—É—Å', '–û–≥—É—Ä–µ—Ü', '–•–æ–ª–ª—Å'],
    'üå¥ –≠–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–π': ['–ê–ª–æ—ç', '–î—Ä–∞–≥–æ–Ω—Ñ—Ä—É—Ç', '–ì—É–∞–≤–∞', '–°–∞–∫—É—Ä–∞', '–≠–∫–∑–æ—Ç'],
    'üå≤ –õ–µ—Å–Ω–æ–π': ['–õ–µ—Å–Ω', '–±—Ä—É—Å–Ω–∏–∫–∞', '—Ö–≤–æ', '–õ–µ—Å–Ω—ã–µ –Ø–≥–æ–¥—ã'],
    'üå∏ –¶–≤–µ—Ç–æ—á–Ω—ã–π': ['–°–∞–∫—É—Ä','–ë–µ—Ä–≥–∞–º', 'Holy Grail'],
    'üç∞ –î–µ—Å–µ—Ä—Ç–Ω—ã–π': ['–ë–∞–±–ª–≥–∞–º', '–ó–µ—Ñ–∏—Ä','–¥–µ—Å–µ—Ä—Ç', '–ö–ª—É–±–Ω–∏—á–Ω—ã–π –°–º—É–∑–∏', '–ß–µ—Ä–Ω–∏—á–Ω—ã–π –ü—É–¥–∏–Ω–≥'],
    'üåø –ú—è—Ç–Ω—ã–π': ['–ú–µ–Ω—Ç–æ–ª', '–ú—è—Ç', '–•–æ–ª–ª—Å'],
    'üå∂Ô∏è –ü—Ä—è–Ω—ã–π': ['–ë–∞–∑–∏–ª–∏–∫', '–ë–µ—Ä–≥–∞–º–æ—Ç', '—Ö–≤–æ'],
    'ü•í –û–≤–æ—â–Ω–æ–π': ['–û–≥—É—Ä–µ—Ü'],
    'üêç –ß–µ—Ä–≤—è—á–∫–∏': ['–ß–µ—Ä–≤', '–ß–µ—Ä–≤—è—á–∫–∏'],
    'üß© –î—Ä—É–≥–æ–µ': ['–¥–∂–µ–º', '–≤–∞—Ä–µ–Ω—å–µ', '–∂–µ–ª–µ', '–°–º–µ—Å—å', '–°–∞–º–æ—É–±–∏–π—Ü–∞'],
}

for index, tag in enumerate(list(tags.keys())):
    tags_db[index + 1] = tag
    
for row in vapes_db:
    tags_found = []
    for index, (key, tag_list) in enumerate(tags.items()):
        for tag in tag_list:
             if re.search(f'\\b{tag.upper()}\\w*', row[1].upper()):
                tags_found.append(index)
                break
    vapes_tags_db += [[row[0]] + [index + 1] for index in tags_found]



SHEET_NAME_VAPORIZERS = '–°–µ–π—á–∞—Å –≤ –Ω–∞–ª–∏—á–∏–∏ - –ò—Å–ø–∞—Ä–∏—Ç–µ–ª–∏'
DATA_RANGE_VAPORIZERS = 'A1:B100'

sheet = spreadsheet.worksheet(SHEET_NAME_VAPORIZERS)
data = sheet.get(DATA_RANGE_VAPORIZERS)
vaporizers = []
for row in data:
    if len(row) == 2:
        vaporizers.append([i.strip().replace(' –û–ú', '') for i in row[0].split('-')] + [row[1]])

vaporizers_db = [] 
vaporizers_brand_db = []
resistances_db = []

brand_dict = {}
resistance_dict = {}
brand_id_counter = 1
resistance_id_counter = 1

for row in vaporizers:
    brand_name = row[0]  
    resistance = row[1]  
    price = row[2]       

    if brand_name not in brand_dict:
        brand_dict[brand_name] = brand_id_counter
        brand_id_counter += 1

    if resistance not in resistance_dict:
        resistance_dict[resistance] = resistance_id_counter
        resistance_id_counter += 1

    vaporizers_db.append([brand_dict[brand_name], resistance_dict[resistance], price])

vaporizers_brand_db = [[brand_id, brand_name] for brand_name, brand_id in brand_dict.items()]
resistances_db = [[resistance_id, resistance] for resistance, resistance_id in resistance_dict.items()]

