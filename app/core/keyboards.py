import random
import logging
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import (InlineKeyboardMarkup, InlineKeyboardButton)
from app.utils.texts import EMOJIS


logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s",)

BRANDS_PER_PAGE = 3
TAGS_PER_PAGE = 3

main_menu = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üí® –ñ–∏–¥–∫–æ—Å—Ç–∏', callback_data='vapes')],
    [InlineKeyboardButton(text='‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É', callback_data='write to the manager')],
])

product_selection = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='‚è≥ –ù–∞ –∑–∞–∫–∞–∑', callback_data='vapes_to_order')],
    [InlineKeyboardButton(text='üöÄ –í –Ω–∞–ª–∏—á–∏–∏', callback_data='vapes_on_hand')],
    [InlineKeyboardButton(text='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu')]
])

async def get_search_menu_keyboard(product_selection: str):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ –∂–∏–¥–∫–æ—Å—Ç–µ–π –¥–ª—è –≤–µ–π–ø–∞.

    :param product_selection: –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ ('on_hand' - –≤ –Ω–∞–ª–∏—á–∏–∏, 'to_order' - –ø–æ–¥ –∑–∞–∫–∞–∑).
    :type product_selection: str
    :return: –û–±—ä–µ–∫—Ç InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–∏—Å–∫–∞.
    :rtype: InlineKeyboardMarkup
    """
    
    try:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üîç –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É', callback_data=f'search_by_tag_{product_selection}')],
            [InlineKeyboardButton(text='üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é', callback_data=f'search_by_flavor_{product_selection}')],
            [InlineKeyboardButton(text='üîç –ü–æ–∏—Å–∫ –ø–æ –±—Ä–µ–Ω–¥—É', callback_data=f'search_by_brand_{product_selection}')],
            [InlineKeyboardButton(text='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu')]
        ])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–∏—Å–∫–∞: {e}")
        return InlineKeyboardMarkup(inline_keyboard=[])

async def get_brands_keyboard(brands, search_in):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –±—Ä–µ–Ω–¥–∞.

    :param brands: –°–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥–æ–≤.
    :param search_in: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ ('on_hand' –∏–ª–∏ 'to_order').
    :return: –û–±—ä–µ–∫—Ç InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –±—Ä–µ–Ω–¥–æ–≤.
    """
    
    try:
        builder = InlineKeyboardBuilder()

        for brand in brands:
            emoji = random.choice(EMOJIS["brand"])
            builder.button(text=f'{emoji} {brand.name}', callback_data=f"brand_{brand.id}_{search_in}")

        builder.adjust(BRANDS_PER_PAGE)

        builder.row(InlineKeyboardButton(text=EMOJIS["search_by_tag"] + "–ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data=f"vapes_{search_in}"))
        builder.row(InlineKeyboardButton(text=EMOJIS["home"] + " –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu"))

        return builder.as_markup()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±—Ä–µ–Ω–¥–æ–≤: {e}")
        return InlineKeyboardMarkup(inline_keyboard=[])

async def get_tags_keyboard(tags, search_in):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–∞.

    :param tags: –°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤.
    :param search_in: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ ('on_hand' –∏–ª–∏ 'to_order').
    :return: –û–±—ä–µ–∫—Ç InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–µ–≥–æ–≤.
    """
    
    try:
        builder = InlineKeyboardBuilder()

        for tag in tags:
            builder.button(text=f'{tag.name}', callback_data=f"tag_{tag.id}_{search_in}")

        builder.adjust(TAGS_PER_PAGE)
        builder.row(InlineKeyboardButton(text=EMOJIS["search_by_tag"] + "–ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data=f"vapes_{search_in}"))
        builder.row(InlineKeyboardButton(text=EMOJIS["home"] + " –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu"))

        return builder.as_markup()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–µ–≥–æ–≤: {e}")
        return InlineKeyboardMarkup(inline_keyboard=[])

async def generate_pagination(data, page, page_size, callback_prefix, search_in):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.

    :param data: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    :param page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.
    :param page_size: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.
    :param callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback-–¥–∞–Ω–Ω—ã—Ö.
    :param search_in: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ ('on_hand', 'to_order', 'statistics').
    :return: –ö–æ—Ä—Ç–µ–∂ (—Ç–µ–∫—Å—Ç, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞).
    """
    try:
        total_pages = (len(data) + page_size - 1) // page_size
        page = max(1, min(page, total_pages))
        
        start_index = (page - 1) * page_size
        end_index = start_index + page_size
        current_page_data = data[start_index:end_index]
        
        text = f"üìö –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}\n\n"
        for item in current_page_data:
            if search_in == 'statistics':
                text += (f"üÜî User ID: {item.id}\n"
                        f"üë§ Username: {item.username}\n"
                        f"üìÖ First seen: {item.first_seen}\n"
                        f"üïí Last seen: {item.last_seen}\n"
                        f"üìä Command count: {item.command_count}\n"
                        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n")
            elif search_in in ('on_hand', 'to_order'):
                availability_set = set()

                availability_20_check = (-1 if search_in == 'on_hand' else 0)
                availability_45_50_60_check = (-1 if search_in == 'on_hand' else 0)

                if item.availability_20 in (1, availability_20_check):
                    availability_set.add("20 MG")
                if item.availability_45_50_60 in (1, availability_45_50_60_check):
                    availability_set.add("45, 50, 60 MG")

                availability = f"üìè {', '.join(availability_set)}" if availability_set else "üìè –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"

                text += f"‚ú® {item.name}\nüí∞ {item.price} —Ä—É–±.\n {availability}\n\n"


        builder = InlineKeyboardBuilder()
        
        if total_pages > 1:
            builder.button(
                text=EMOJIS["pagination_back"] + " –ù–∞–∑–∞–¥",
                callback_data=f"page_{total_pages if page == 1 else (page - 1)}_{callback_prefix}_{search_in}",
            )
            builder.button(
                text="–í–ø–µ—Ä—ë–¥ " + EMOJIS["pagination_forward"],
                callback_data=f"page_{1 if page == total_pages else (page + 1)}_{callback_prefix}_{search_in}",
            )

        # –ö–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
        return_buttons = {
            "brand": "üîç –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±—Ä–µ–Ω–¥–∞–º",
            "tag": "üîç –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ–≥–∞–º",
            "flavor": "üîç –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É",
        }

        for key, text_button in return_buttons.items():
            if key in callback_prefix:
                builder.button(text=text_button, callback_data=f"search_by_{key}_{search_in}")
                break

        builder.button(text=EMOJIS["home"] + " –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")

        builder.adjust(2, 1, 1) if total_pages > 1 else builder.adjust(1, 1)
        
        return text, builder.as_markup()
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
        return "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.", InlineKeyboardMarkup(inline_keyboard=[])
